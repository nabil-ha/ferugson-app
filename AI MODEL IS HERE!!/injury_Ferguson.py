# -*- coding: utf-8 -*-
"""injury_Ferguson

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZK9g-afMaM8ryim5TeSr3c1MIWi49sT1
"""

from sklearn.metrics import classification_report, confusion_matrix
from sklearn.model_selection import train_test_split
import torch
from torch.utils.data import TensorDataset, DataLoader
from sklearn.preprocessing import StandardScaler
import joblib
import pandas as pd
import numpy as np

import kagglehub
mrsimple07_injury_prediction_dataset_path = kagglehub.dataset_download('mrsimple07/injury-prediction-dataset')

print('Data source import complete.')

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

import torch

df = pd.read_csv(mrsimple07_injury_prediction_dataset_path + "/injury_data.csv")

df

"""# Preprocess"""

df['Player_Weight'] = df['Player_Weight'].round(2)
df['Player_Height'] = df['Player_Height'].round(2)

df_info = pd.DataFrame(df.dtypes, columns=['Dtype'])
df_info['Unique'] = df.nunique().values
df_info['Null'] = df.isnull().sum().values
df_info

"""## BMI"""

df['BMI'] = df['Player_Weight'] / (df['Player_Height'] / 100) ** 2

df

"""## Drop unnecessary columns"""

df = df.drop(columns=["Recovery_Time", "Player_Age", "Player_Height", "Player_Weight"])
df

df['Training_Intensity'].describe()

df['Training_Intensity'] = (df['Training_Intensity'] * 9 + 1).round()

df['Training_Intensity'].describe()

def classify_risk(row):
    bmi = row['BMI']
    intensity = row['Training_Intensity']
    prev_injury = row['Previous_Injuries']

    if (prev_injury == 1 and intensity > 7.5) or (bmi < 18 or bmi > 30):
        return 2  # High Risk
    elif (4 <= intensity <= 7.5) or (prev_injury == 1 and intensity > 4) or (28 <= bmi <= 30):
        return 1  # Medium Risk
    else:
        return 0  # Low Risk

df['Likelihood_of_Injury'] = df.apply(classify_risk, axis=1)

df

df["Likelihood_of_Injury"].value_counts()

x = [1, 2, 3]
y = np.array([1, 2, 3])
y.describe()

df

"""# Split"""

X = df.drop('Likelihood_of_Injury', axis=1)  # Features
y = df['Likelihood_of_Injury']               # Target

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)

X

y

"""## Scale

"""

# Scale features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

"""## Convert to tensors"""

# Convert to tensors
X_train_tensor = torch.tensor(X_train_scaled, dtype=torch.float32)
y_train_tensor = torch.tensor(y_train.values, dtype=torch.long)
X_test_tensor = torch.tensor(X_test_scaled, dtype=torch.float32)
y_test_tensor = torch.tensor(y_test.values, dtype=torch.long)

# Create datasets and loaders
train_dataset = TensorDataset(X_train_tensor, y_train_tensor)
test_dataset = TensorDataset(X_test_tensor, y_test_tensor)

train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)
test_loader = DataLoader(test_dataset, batch_size=32)

"""# Model

## Define Model
"""

import torch.nn as nn
import torch.nn.functional as F

class InjuryClassifier(nn.Module):
    def __init__(self, input_size):
        super(InjuryClassifier, self).__init__()
        self.fc1 = nn.Linear(input_size, 64)
        self.fc2 = nn.Linear(64, 32)
        self.fc3 = nn.Linear(32, 3)  # 3 classes: 0, 1, 2

    def forward(self, x):
        x = F.relu(self.fc1(x))
        x = F.relu(self.fc2(x))
        return self.fc3(x)

"""## Train Model"""

model = InjuryClassifier(input_size=X_train.shape[1])
criterion = nn.CrossEntropyLoss()
optimizer = torch.optim.Adam(model.parameters(), lr=0.001)

# Training loop
epochs = 300
for epoch in range(epochs):
    model.train()
    total_loss = 0
    for X_batch, y_batch in train_loader:
        optimizer.zero_grad()
        outputs = model(X_batch)
        loss = criterion(outputs, y_batch)
        loss.backward()
        optimizer.step()
        total_loss += loss.item()
    print(f"Epoch {epoch+1}/{epochs}, Loss: {total_loss:.4f}")

model.eval()
correct = 0
total = 0
with torch.no_grad():
    for X_batch, y_batch in test_loader:
        outputs = model(X_batch)
        _, predicted = torch.max(outputs.data, 1)
        total += y_batch.size(0)
        correct += (predicted == y_batch).sum().item()

print(f"Test Accuracy: {100 * correct / total:.2f}%")

class ammar():
  def __init__(self):
    return

  def say_hello(self):
    print("Hello")

!pip install ammar
import ammar

ammar.say_hell

# Collect all predictions and true labels
all_preds = []
all_labels = []

model.eval()
with torch.no_grad():
    for X_batch, y_batch in test_loader:
        outputs = model(X_batch)
        _, predicted = torch.max(outputs, 1)
        all_preds.extend(predicted.cpu().numpy())
        all_labels.extend(y_batch.cpu().numpy())

# Convert to numpy arrays
all_preds = np.array(all_preds)
all_labels = np.array(all_labels)

# Classification report
print("Classification Report:")
print(classification_report(all_labels, all_preds, digits=3))

# Confusion matrix
print("Confusion Matrix:")
print(confusion_matrix(all_labels, all_preds))

"""# Download Models"""

torch.save(model.state_dict(), 'injury_model_weights.pth')

joblib.dump(scaler, 'scaler.pkl')

"""# Dummy Predict"""

def predict(model, scaler, input_data):
    model.eval()

    # Preprocess input
    input_scaled = scaler.transform([input_data])  # ensure 2D
    input_tensor = torch.tensor(input_scaled, dtype=torch.float32)

    # Predict
    with torch.no_grad():
        output = model(input_tensor)
        predicted_class = torch.argmax(output, dim=1).item()

    return predicted_class  # 0 = Low, 1 = Medium, 2 = High

predict(model, scaler, [1, 3, 22])

